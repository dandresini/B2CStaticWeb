@page "/fetchdata"
@using BlazorApp.Shared 
@using System.Security.Claims
@inject NavigationManager navigationManager; 
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject HttpClient Http
@attribute [Authorize]

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
        @if (userClaims is not null){
            @foreach (var claim in userClaims)
            {
                <li>
                    @claim.Type "->" @claim.Value
                </li>
            }
        }
        
    </ul>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts = new WeatherForecast[]{};
    private IEnumerable<Claim>? userClaims;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
            userClaims = authstate.User.Claims;

            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("/api/WeatherForecast") ?? new WeatherForecast[]{};
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
